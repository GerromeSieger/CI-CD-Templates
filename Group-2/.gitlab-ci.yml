stages:
  - test
  - build
  - deploy

#test the frontend application (react, vuejs, angular)
test_frontend:
  stage: test
  image: node:13.12.0-alpine
  script: 
    - cd ./frontend
    - yarn install
    - yarn run test
    
#test the backend application (django)
test_backend:
  stage: test
  image: python:3.12.0a4-slim-buster
  script:
    - cd ./backend/accounts
    - python tests.py

#build docker image for the frontend 
build_frontend_docker_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script: 
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
  script:
    - docker build -t $FRONTEND_IMAGE:$TAG ./frontend      
    - docker push $FRONTEND_IMAGE:$TAG

#build docker image for the frontend 
build_backend_docker_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script: 
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
  script: 
    - docker build -t $BACKEND_IMAGE:$TAG ./backend       
    - docker push $BACKEND_IMAGE:$TAG

#deploy the containers to a remote server 
deploy_to_staging:
  stage: deploy
  environment:
    name: staging
  image: alpine
  script:
    - apk add --no-cache curl
    - curl -LO $K8S_STABLE_VERSION_URL
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - mkdir ~/.kube
    - cp $KUBECONFIG ~/.kube/config
    - kubectl apply -f $MANIFEST_FILES_PATH

deploy_to_production:
  stage: deploy
  environment:
    name: production
  image: alpine
  script:
    - apk add --no-cache curl
    - curl -LO $K8S_STABLE_VERSION_URL
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - mkdir ~/.kube
    - cp $KUBECONFIG ~/.kube/config
    - kubectl apply -f $MANIFEST_FILES_PATH
  only:
    - master      